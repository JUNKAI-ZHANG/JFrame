// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_cs_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_5fcs_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_5fcs_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_5fcs_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_5fcs_5fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5fcs_5fcommon_2eproto;
namespace CSMessage {
class PlayerLoginReq;
class PlayerLoginReqDefaultTypeInternal;
extern PlayerLoginReqDefaultTypeInternal _PlayerLoginReq_default_instance_;
class PlayerLoginResp;
class PlayerLoginRespDefaultTypeInternal;
extern PlayerLoginRespDefaultTypeInternal _PlayerLoginResp_default_instance_;
}  // namespace CSMessage
PROTOBUF_NAMESPACE_OPEN
template<> ::CSMessage::PlayerLoginReq* Arena::CreateMaybeMessage<::CSMessage::PlayerLoginReq>(Arena*);
template<> ::CSMessage::PlayerLoginResp* Arena::CreateMaybeMessage<::CSMessage::PlayerLoginResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CSMessage {

// ===================================================================

class PlayerLoginReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSMessage.PlayerLoginReq) */ {
 public:
  PlayerLoginReq();
  virtual ~PlayerLoginReq();

  PlayerLoginReq(const PlayerLoginReq& from);
  PlayerLoginReq(PlayerLoginReq&& from) noexcept
    : PlayerLoginReq() {
    *this = ::std::move(from);
  }

  inline PlayerLoginReq& operator=(const PlayerLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerLoginReq& operator=(PlayerLoginReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerLoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerLoginReq* internal_default_instance() {
    return reinterpret_cast<const PlayerLoginReq*>(
               &_PlayerLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerLoginReq& a, PlayerLoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerLoginReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerLoginReq* New() const final {
    return CreateMaybeMessage<PlayerLoginReq>(nullptr);
  }

  PlayerLoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerLoginReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerLoginReq& from);
  void MergeFrom(const PlayerLoginReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerLoginReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSMessage.PlayerLoginReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fcs_5fcommon_2eproto);
    return ::descriptor_table_msg_5fcs_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:CSMessage.PlayerLoginReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fcs_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class PlayerLoginResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSMessage.PlayerLoginResp) */ {
 public:
  PlayerLoginResp();
  virtual ~PlayerLoginResp();

  PlayerLoginResp(const PlayerLoginResp& from);
  PlayerLoginResp(PlayerLoginResp&& from) noexcept
    : PlayerLoginResp() {
    *this = ::std::move(from);
  }

  inline PlayerLoginResp& operator=(const PlayerLoginResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerLoginResp& operator=(PlayerLoginResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerLoginResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerLoginResp* internal_default_instance() {
    return reinterpret_cast<const PlayerLoginResp*>(
               &_PlayerLoginResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerLoginResp& a, PlayerLoginResp& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerLoginResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerLoginResp* New() const final {
    return CreateMaybeMessage<PlayerLoginResp>(nullptr);
  }

  PlayerLoginResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerLoginResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerLoginResp& from);
  void MergeFrom(const PlayerLoginResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerLoginResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSMessage.PlayerLoginResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fcs_5fcommon_2eproto);
    return ::descriptor_table_msg_5fcs_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMsgFieldNumber = 2,
    kPlayerUidFieldNumber = 3,
    kErrorCodeFieldNumber = 1,
  };
  // string error_msg = 2;
  void clear_error_msg();
  const std::string& error_msg() const;
  void set_error_msg(const std::string& value);
  void set_error_msg(std::string&& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  std::string* mutable_error_msg();
  std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // int64 player_uid = 3;
  void clear_player_uid();
  ::PROTOBUF_NAMESPACE_ID::int64 player_uid() const;
  void set_player_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_player_uid() const;
  void _internal_set_player_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 error_code = 1;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::int32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSMessage.PlayerLoginResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  ::PROTOBUF_NAMESPACE_ID::int64 player_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fcs_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerLoginReq

// string username = 1;
inline void PlayerLoginReq::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerLoginReq::username() const {
  // @@protoc_insertion_point(field_get:CSMessage.PlayerLoginReq.username)
  return _internal_username();
}
inline void PlayerLoginReq::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:CSMessage.PlayerLoginReq.username)
}
inline std::string* PlayerLoginReq::mutable_username() {
  // @@protoc_insertion_point(field_mutable:CSMessage.PlayerLoginReq.username)
  return _internal_mutable_username();
}
inline const std::string& PlayerLoginReq::_internal_username() const {
  return username_.GetNoArena();
}
inline void PlayerLoginReq::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PlayerLoginReq::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSMessage.PlayerLoginReq.username)
}
inline void PlayerLoginReq::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSMessage.PlayerLoginReq.username)
}
inline void PlayerLoginReq::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSMessage.PlayerLoginReq.username)
}
inline std::string* PlayerLoginReq::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerLoginReq::release_username() {
  // @@protoc_insertion_point(field_release:CSMessage.PlayerLoginReq.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginReq::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:CSMessage.PlayerLoginReq.username)
}

// string password = 2;
inline void PlayerLoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerLoginReq::password() const {
  // @@protoc_insertion_point(field_get:CSMessage.PlayerLoginReq.password)
  return _internal_password();
}
inline void PlayerLoginReq::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:CSMessage.PlayerLoginReq.password)
}
inline std::string* PlayerLoginReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:CSMessage.PlayerLoginReq.password)
  return _internal_mutable_password();
}
inline const std::string& PlayerLoginReq::_internal_password() const {
  return password_.GetNoArena();
}
inline void PlayerLoginReq::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PlayerLoginReq::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSMessage.PlayerLoginReq.password)
}
inline void PlayerLoginReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSMessage.PlayerLoginReq.password)
}
inline void PlayerLoginReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSMessage.PlayerLoginReq.password)
}
inline std::string* PlayerLoginReq::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerLoginReq::release_password() {
  // @@protoc_insertion_point(field_release:CSMessage.PlayerLoginReq.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:CSMessage.PlayerLoginReq.password)
}

// -------------------------------------------------------------------

// PlayerLoginResp

// int32 error_code = 1;
inline void PlayerLoginResp::clear_error_code() {
  error_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerLoginResp::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerLoginResp::error_code() const {
  // @@protoc_insertion_point(field_get:CSMessage.PlayerLoginResp.error_code)
  return _internal_error_code();
}
inline void PlayerLoginResp::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_code_ = value;
}
inline void PlayerLoginResp::set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:CSMessage.PlayerLoginResp.error_code)
}

// string error_msg = 2;
inline void PlayerLoginResp::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerLoginResp::error_msg() const {
  // @@protoc_insertion_point(field_get:CSMessage.PlayerLoginResp.error_msg)
  return _internal_error_msg();
}
inline void PlayerLoginResp::set_error_msg(const std::string& value) {
  _internal_set_error_msg(value);
  // @@protoc_insertion_point(field_set:CSMessage.PlayerLoginResp.error_msg)
}
inline std::string* PlayerLoginResp::mutable_error_msg() {
  // @@protoc_insertion_point(field_mutable:CSMessage.PlayerLoginResp.error_msg)
  return _internal_mutable_error_msg();
}
inline const std::string& PlayerLoginResp::_internal_error_msg() const {
  return error_msg_.GetNoArena();
}
inline void PlayerLoginResp::_internal_set_error_msg(const std::string& value) {
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PlayerLoginResp::set_error_msg(std::string&& value) {
  
  error_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSMessage.PlayerLoginResp.error_msg)
}
inline void PlayerLoginResp::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSMessage.PlayerLoginResp.error_msg)
}
inline void PlayerLoginResp::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSMessage.PlayerLoginResp.error_msg)
}
inline std::string* PlayerLoginResp::_internal_mutable_error_msg() {
  
  return error_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerLoginResp::release_error_msg() {
  // @@protoc_insertion_point(field_release:CSMessage.PlayerLoginResp.error_msg)
  
  return error_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginResp::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:CSMessage.PlayerLoginResp.error_msg)
}

// int64 player_uid = 3;
inline void PlayerLoginResp::clear_player_uid() {
  player_uid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerLoginResp::_internal_player_uid() const {
  return player_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerLoginResp::player_uid() const {
  // @@protoc_insertion_point(field_get:CSMessage.PlayerLoginResp.player_uid)
  return _internal_player_uid();
}
inline void PlayerLoginResp::_internal_set_player_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  player_uid_ = value;
}
inline void PlayerLoginResp::set_player_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_player_uid(value);
  // @@protoc_insertion_point(field_set:CSMessage.PlayerLoginResp.player_uid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CSMessage

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_5fcs_5fcommon_2eproto
